const HtmlWebpackPlugin = require( 'html-webpack-plugin' );const webpack = require( 'webpack' );const UglifyJsWebpackPlugin = require( 'uglifyjs-webpack-plugin' )const path = require( 'path' );const devServer = require( './build-utils/webpackDevServer.config' )const builldPlugins = [    new webpack.optimize.AggressiveMergingPlugin(),//Merge chunks    new UglifyJsWebpackPlugin()]const dotenv = require( 'dotenv' ).config( { path: __dirname + '/.env' } );const ForkTsCheckerWebpackPlugin = require( 'fork-ts-checker-webpack-plugin' );module.exports = ( { mode, es5 = false, aggressize = false } = {} ) => {    return {        entry: mode === 'prod' ? './src/index.tsx' : './src/index.hmr.tsx',        mode: mode !== 'prod' ? 'development' : 'production',        output: {            path: path.join( __dirname, '.', 'build', ),            filename: '[name].bundle.js',            chunkFilename: "[name].chunk.js",            publicPath: '/',        },        resolve: {            extensions: [ ".ts", ".tsx", ".js", ".jsx" ],            descriptionFiles: [ 'package.json' ],            alias: {                'react-dom': path.resolve( path.join( __dirname, '.', 'node_modules', mode === 'prod' ? 'react-dom' : '@hot-loader/react-dom' ) ),                '@app': path.resolve( __dirname, '.', 'src', 'app' ),                'react-hot-loader': path.resolve( __dirname, 'node_modules', 'react-hot-loader' ),                '@assets': path.resolve( __dirname, 'src', 'assets' ),                'target': path.resolve( __dirname, 'node_modules' ),                '@shared': path.resolve( __dirname, 'src', 'shared' ),                // 'theme': path.resolve( __dirname, 'dashboardTheme' ),                '@target': path.resolve( __dirname, 'node_modules' ),            },        },        devServer: {            ...devServer( es5 )        },        stats: 'errors-only',        devtool: 'source-map',        module: {            rules: [                {                    test: /\.t?sx?$/,                    exclude: es5 ? !aggressize ? /node_modules\/(?!(@material-ui|react-spring)\/).*/ : / / : /node_modules|packages/,                    use: [ {                        loader: 'babel-loader',                        options: {                            cacheDirectory: true,                            babelrc: false,                            presets: [ [ "@babel/preset-env", {                                targets: {                                    "chrome": "58",                                    "ie": "11"                                }                            } ],                                "@babel/preset-typescript",                                "@babel/preset-react" ],                            plugins: [                                "@babel/plugin-syntax-dynamic-import",                                ...( mode === 'prod' ? [] : [ "react-hot-loader/babel" ] ),                                [ "@babel/plugin-proposal-decorators", { legacy: true } ],                                [                                    "@babel/plugin-proposal-class-properties",                                    {                                        "loose": true                                    }                                ],                                [                                    "const-enum",                                    {                                        "transform": "constObject"                                    }                                ]                            ],                        }                    }                    ]                },                {                    test: /\.js$/,                    exclude: es5 ? !aggressize ? /node_modules\/(?!(@material-ui|react-spring)\/).*/ : / / : /node_modules|packages/,                    use: [ {                        loader: 'babel-loader?cacheDirectory',                        options: {                            presets: [ [ "@babel/preset-env", {                                targets: {                                    "chrome": "58",                                    "ie": "11"                                }                            } ],                                "@babel/preset-react" ],                            plugins: [                                "@babel/plugin-syntax-dynamic-import",                                ...( mode === 'prod' ? [] : [ "react-hot-loader/babel" ] ),                                [                                    "@babel/plugin-proposal-class-properties",                                    {                                        "loose": true                                    }                                ],                            ],                        }                    }                    ]                },                {                    test: /\.(png|jpe?g|gif|svg)$/,                    use:                        [                            {                                loader: 'file-loader',                                options: {                                    name: '[path][name].[ext]',                                    outputPath: 'images',                                    context: 'src/assets/images'                                },                            },                        ],                }, {                    test: /\.(scss|css)$/,                    use: [                        {                            loader: "style-loader"                        }, {                            loader: "css-loader"                        }, {                            loader: "sass-loader"                        }                    ]                }            ]        },        parallelism: 1,        optimization: {            minimizer: [                // ...( mode === 'prod' ? [ new terser() ] : [] )            ],            splitChunks: { chunks: "all" }        },        plugins: [            new ForkTsCheckerWebpackPlugin(),            new webpack.DefinePlugin( {                'process.env': JSON.stringify( {                    NODE_ENV: mode !== 'prod' ? 'development' : 'production',                    ...( dotenv.parsed || {})                } )            } ),            new HtmlWebpackPlugin( {                template: "public/index.html"            } ),            new webpack.NamedModulesPlugin(),            ...( mode === 'prod' ? builldPlugins : [] )        ]    }}